openapi: 3.0.3
info:
  title: Swagger TODO API - OpenAPI 3.0
  description: |-
    This is a sample TODO API Server based on the OpenAPI 3.0 specification.

  termsOfService: http://swagger.io/terms/
  contact:
    email: diego.colombia.devs@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: users
    description: Operations about user
  - name: auth
    description: Operations about authentication
  - name: tasks
    description: Operations about tasks
paths:
  /api/users:
    post:
      tags:
        - users
      summary: Create user
      description: Any user can signin in the service.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: username already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The username [username] is already registered!
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      requestBody:
        description: data payload for login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: Mismatch user credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The username or password is incorrect!
  /api/tasks:
    get:
      tags:
        - tasks
      summary: Get tasks tasks
      parameters:
        - in: header
          name: x-token
          description: "The user id that needs to process request."
          schema:
            type: string
          required: true
      description: Get tasks created by user.
      operationId: GetTasks
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskResponse"
        "401":
          description: auth token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRequired"
  /api/tasks/create:
    post:
      tags:
        - tasks
      summary: Create task
      parameters:
        - in: header
          name: x-token
          description: "The user id that needs to process request."
          schema:
            type: string
          required: true
      description: This can only be done by the logged in user.
      operationId: createTask
      requestBody:
        description: Create a task in the service
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: field required
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "#/components/schemas/FieldError"
        "401":
          description: auth token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRequired"
  /api/tasks/{id}:
    get:
      tags:
        - tasks
      summary: Get task by id
      description: "Get task by id"
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be Geted."
          required: true
          schema:
            type: string
        - name: x-token
          in: header
          description: "The user id that needs to process request."
          schema:
            type: string
          required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "401":
          description: auth token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRequired"
        "500":
          description: id is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTaskId"
    put:
      tags:
        - tasks
      summary: Update task
      description: This can only be done by the logged in user.
      operationId: updateTask
      parameters:
        - name: id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
        - name: x-token
          in: header
          description: "The user id that needs to process request."
          schema:
            type: string
          required: true
      requestBody:
        description: Update a task in the service
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: field required
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      $ref: "#/components/schemas/FieldError"

        "401":
          description: auth token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRequired"
        "500":
          description: id is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTaskId"
    delete:
      tags:
        - tasks
      summary: Delete task
      description: This can only be done by the logged in user.
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
        - name: x-token
          in: header
          description: "The user id that needs to process request."
          schema:
            type: string
          required: true
      responses:
        "200":
          description: task deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "401":
          description: auth token required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRequired"
        "500":
          description: id is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidTaskId"
components:
  schemas:
    FieldError:
      type: object
      properties:
        type:
          type: string
          example: field
        msg:
          type: string
          example: msg
        path:
          type: string
          example: path
        location:
          type: string
          example: location
    Credentials:
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: xxxxxxxxxxxxx
    TokenRequired:
      type: object
      properties:
        message:
          type: string
          example: AuthToken is required
    InvalidTaskId:
      type: object
      properties:
        message:
          type: string
          example: Cast to ObjectId failed for value [id] (type string) at path \"_id\" for model \"[model]\"
    Auth:
      type: object
      properties:
        user:
          type: object
          properties:
            uid:
              type: string
              example: xxxxxxxxxxxxxxxxxxxxxxxxx
            username:
              type: string
              example: theUser
        token:
          type: string
          example: xxxxxxxxxxxxxxxxxxxxxxxxx
      xml:
        name: auth
    User:
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: password
    UserResponse:
      type: object
      properties:
        uid:
          type: string
          example: 66a8fe74d2d65c0e594018a9
        username:
          type: string
          example: theUser
        createdAt:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
      xml:
        name: user
    Task:
      type: object
      properties:
        title:
          type: string
          example: theTitle
        content:
          type: string
          example: theContent
        date:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
      xml:
        name: task
    TaskResponse:
      type: object
      properties:
        _id:
          type: string
          example: 66a8fe74d2d65c0e594018a9
        content:
          type: string
          example: theContent
        date:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
        isActive:
          type: boolean
          example: true
        title:
          type: string
          example: theTitle
        user:
          type: string
          example: 66a30027751b8010b90d2af3
        createdAt:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-07-30T14:53:40.345Z"
        _v:
          type: integer
          example: 0
      xml:
        name: task
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
